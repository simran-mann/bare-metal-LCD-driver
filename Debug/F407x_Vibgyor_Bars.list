
F407x_Vibgyor_Bars.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c4  080001a8  080001a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800126c  0800126c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800126c  0800126c  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  0800126c  0800126c  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800126c  0800126c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800126c  0800126c  0000226c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001270  08001270  00002270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001274  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003004  2**0
                  CONTENTS
 10 .bss          00005044  20000004  20000004  00003004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005048  20005048  00003004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001537  00000000  00000000  0000302e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000049d  00000000  00000000  00004565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a8  00000000  00000000  00004a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013d  00000000  00000000  00004bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e087  00000000  00000000  00004ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013c1  00000000  00000000  00032d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086be8  00000000  00000000  00034135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bad1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000670  00000000  00000000  000bad60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  000bb3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	@ (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	@ (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001254 	.word	0x08001254

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	@ (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	@ (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08001254 	.word	0x08001254

080001e8 <main>:

void SystemClock_Setup(void);


int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af02      	add	r7, sp, #8

	SystemClock_Setup();
 80001ee:	f000 f86f 	bl	80002d0 <SystemClock_Setup>
	bsp_lcd_init();
 80001f2:	f000 f92b 	bl	800044c <bsp_lcd_init>

	uint32_t x_start,x_width,y_start,y_height;

	bsp_lcd_set_background_color(BLACK);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f000 f9d2 	bl	80005a0 <bsp_lcd_set_background_color>
#if(BSP_LCD_ORIENTATION == LANDSCAPE)
	x_start = 0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
	y_start = 0;
 8000200:	2300      	movs	r3, #0
 8000202:	60bb      	str	r3, [r7, #8]
	x_width = 320;
 8000204:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000208:	607b      	str	r3, [r7, #4]
	y_height = 34;
 800020a:	2322      	movs	r3, #34	@ 0x22
 800020c:	603b      	str	r3, [r7, #0]
	x_start = 0;
	y_start = 0;
	x_width = 240;
	y_height = 45;
#endif
	bsp_lcd_fill_rect(VIOLET, x_start, x_width, y_height*0, y_height);
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2300      	movs	r3, #0
 8000214:	687a      	ldr	r2, [r7, #4]
 8000216:	68f9      	ldr	r1, [r7, #12]
 8000218:	4829      	ldr	r0, [pc, #164]	@ (80002c0 <main+0xd8>)
 800021a:	f000 f9d3 	bl	80005c4 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(INDIGO, x_start, x_width, y_height*1, y_height);
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	68f9      	ldr	r1, [r7, #12]
 8000228:	4826      	ldr	r0, [pc, #152]	@ (80002c4 <main+0xdc>)
 800022a:	f000 f9cb 	bl	80005c4 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(BLUE,   x_start, x_width, y_height*2, y_height);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	005a      	lsls	r2, r3, #1
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	4613      	mov	r3, r2
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	68f9      	ldr	r1, [r7, #12]
 800023c:	20ff      	movs	r0, #255	@ 0xff
 800023e:	f000 f9c1 	bl	80005c4 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(GREEN,  x_start, x_width, y_height*3, y_height);
 8000242:	683a      	ldr	r2, [r7, #0]
 8000244:	4613      	mov	r3, r2
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	441a      	add	r2, r3
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	4613      	mov	r3, r2
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	68f9      	ldr	r1, [r7, #12]
 8000254:	f44f 407f 	mov.w	r0, #65280	@ 0xff00
 8000258:	f000 f9b4 	bl	80005c4 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(YELLOW, x_start, x_width, y_height*4, y_height);
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	009a      	lsls	r2, r3, #2
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	4613      	mov	r3, r2
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	68f9      	ldr	r1, [r7, #12]
 800026a:	4817      	ldr	r0, [pc, #92]	@ (80002c8 <main+0xe0>)
 800026c:	f000 f9aa 	bl	80005c4 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(ORANGE, x_start, x_width, y_height*5, y_height);
 8000270:	683a      	ldr	r2, [r7, #0]
 8000272:	4613      	mov	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	441a      	add	r2, r3
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	4613      	mov	r3, r2
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	68f9      	ldr	r1, [r7, #12]
 8000282:	4812      	ldr	r0, [pc, #72]	@ (80002cc <main+0xe4>)
 8000284:	f000 f99e 	bl	80005c4 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(RED, 	  x_start, x_width, y_height*6, y_height);
 8000288:	683a      	ldr	r2, [r7, #0]
 800028a:	4613      	mov	r3, r2
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	4413      	add	r3, r2
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	461a      	mov	r2, r3
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	4613      	mov	r3, r2
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	68f9      	ldr	r1, [r7, #12]
 800029e:	f44f 007f 	mov.w	r0, #16711680	@ 0xff0000
 80002a2:	f000 f98f 	bl	80005c4 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(YELLOW, x_start, x_width, y_height*4, y_height);
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	009a      	lsls	r2, r3, #2
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	4613      	mov	r3, r2
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	68f9      	ldr	r1, [r7, #12]
 80002b4:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <main+0xe0>)
 80002b6:	f000 f985 	bl	80005c4 <bsp_lcd_fill_rect>

    /* Loop forever */
	for(;;);
 80002ba:	bf00      	nop
 80002bc:	e7fd      	b.n	80002ba <main+0xd2>
 80002be:	bf00      	nop
 80002c0:	009400d3 	.word	0x009400d3
 80002c4:	004b0082 	.word	0x004b0082
 80002c8:	00ffff00 	.word	0x00ffff00
 80002cc:	00ff7f00 	.word	0x00ff7f00

080002d0 <SystemClock_Setup>:
}


void SystemClock_Setup(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 80002d6:	4b45      	ldr	r3, [pc, #276]	@ (80003ec <SystemClock_Setup+0x11c>)
 80002d8:	60fb      	str	r3, [r7, #12]
	FLASH_TypeDef *pFlash = FLASH;
 80002da:	4b45      	ldr	r3, [pc, #276]	@ (80003f0 <SystemClock_Setup+0x120>)
 80002dc:	60bb      	str	r3, [r7, #8]
	PWR_TypeDef *pPWR = PWR;
 80002de:	4b45      	ldr	r3, [pc, #276]	@ (80003f4 <SystemClock_Setup+0x124>)
 80002e0:	607b      	str	r3, [r7, #4]

	//program flash wait states
	REG_SET_VAL(pFlash->ACR,0x5U,0xFU,FLASH_ACR_LATENCY_Pos);
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f023 020f 	bic.w	r2, r3, #15
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f043 0205 	orr.w	r2, r3, #5
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	601a      	str	r2, [r3, #0]

	//overdrive settings
	REG_SET_BIT(pRCC->APB1ENR,RCC_APB1ENR_PWREN_Pos); 	//enable clock for PWR register access
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	641a      	str	r2, [r3, #64]	@ 0x40
	REG_SET_BIT(pPWR->CR,PWR_CR_VOS_Pos); 				//vos = 1
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]

	// setting up main PLL
	REG_SET_VAL(pRCC->PLLCFGR,0x8U,0x3FU,RCC_PLLCFGR_PLLM_Pos);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	f043 0208 	orr.w	r2, r3, #8
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pRCC->PLLCFGR,168U,0x1FFU,RCC_PLLCFGR_PLLN_Pos);
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	6053      	str	r3, [r2, #4]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	f443 5228 	orr.w	r2, r3, #10752	@ 0x2a00
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pRCC->PLLCFGR,0x00U,0x3U,RCC_PLLCFGR_PLLP_Pos);
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	605a      	str	r2, [r3, #4]

	//setting up AHB and APBx clocks
	REG_SET_VAL(pRCC->CFGR,0U,0xFU,RCC_CFGR_HPRE_Pos); //AHB prescaler
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	689a      	ldr	r2, [r3, #8]
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pRCC->CFGR,0x5U,0x7U,RCC_CFGR_PPRE1_Pos); //APB1 prescaler
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	f443 52a0 	orr.w	r2, r3, #5120	@ 0x1400
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pRCC->CFGR,0x4U,0x7U,RCC_CFGR_PPRE2_Pos); //APB2 prescaler
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	609a      	str	r2, [r3, #8]

	//turn on PLL and wait for PLLCLK ready
	REG_SET_BIT(pRCC->CR,RCC_CR_PLLON_Pos);
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	601a      	str	r2, [r3, #0]
	while(!REG_READ_BIT(pRCC->CR,RCC_CR_PLLRDY_Pos));
 80003aa:	bf00      	nop
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0f9      	beq.n	80003ac <SystemClock_Setup+0xdc>

	//switch PLLCLK as SYSCLK
	REG_SET_VAL(pRCC->CFGR,0x2U,0x3U,RCC_CFGR_SW_Pos);
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	f023 0203 	bic.w	r2, r3, #3
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f043 0202 	orr.w	r2, r3, #2
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	609a      	str	r2, [r3, #8]
	while(!(REG_READ_VAL(pRCC->CFGR,0x3U,RCC_CFGR_SWS_Pos) == 0x2U));
 80003d0:	bf00      	nop
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	f003 0303 	and.w	r3, r3, #3
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d1f8      	bne.n	80003d2 <SystemClock_Setup+0x102>

}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40023c00 	.word	0x40023c00
 80003f4:	40007000 	.word	0x40007000

080003f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f8:	480d      	ldr	r0, [pc, #52]	@ (8000430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	@ (8000434 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	@ (8000438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	@ (800043c <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	@ (8000440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	@ (8000444 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000426:	f000 fef1 	bl	800120c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042a:	f7ff fedd 	bl	80001e8 <main>

0800042e <LoopForever>:

LoopForever:
    b LoopForever
 800042e:	e7fe      	b.n	800042e <LoopForever>
  ldr   r0, =_estack
 8000430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800043c:	08001274 	.word	0x08001274
  ldr r2, =_sbss
 8000440:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000444:	20005048 	.word	0x20005048

08000448 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC_IRQHandler>
	...

0800044c <bsp_lcd_init>:




void bsp_lcd_init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	lcd_pin_init();
 8000450:	f000 f93a 	bl	80006c8 <lcd_pin_init>
	lcd_spi_init();
 8000454:	f000 fa54 	bl	8000900 <lcd_spi_init>
	lcd_spi_enable();
 8000458:	f000 fa44 	bl	80008e4 <lcd_spi_enable>
	lcd_handle.orientation = BSP_LCD_ORIENTATION;
 800045c:	4b19      	ldr	r3, [pc, #100]	@ (80004c4 <bsp_lcd_init+0x78>)
 800045e:	2201      	movs	r2, #1
 8000460:	701a      	strb	r2, [r3, #0]
	lcd_handle.pixel_format = BSP_LCD_PIXEL_FMT;
 8000462:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <bsp_lcd_init+0x78>)
 8000464:	2202      	movs	r2, #2
 8000466:	705a      	strb	r2, [r3, #1]
	lcd_reset();
 8000468:	f000 fab6 	bl	80009d8 <lcd_reset>
	lcd_config();
 800046c:	f000 fae2 	bl	8000a34 <lcd_config>
	hlcd->area.x1 = 0;
 8000470:	4b15      	ldr	r3, [pc, #84]	@ (80004c8 <bsp_lcd_init+0x7c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2200      	movs	r2, #0
 8000476:	831a      	strh	r2, [r3, #24]
	hlcd->area.x2 = BSP_LCD_ACTIVE_WIDTH-1;
 8000478:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <bsp_lcd_init+0x7c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f240 123f 	movw	r2, #319	@ 0x13f
 8000480:	835a      	strh	r2, [r3, #26]
	hlcd->area.y1 = 0;
 8000482:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <bsp_lcd_init+0x7c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2200      	movs	r2, #0
 8000488:	839a      	strh	r2, [r3, #28]
	hlcd->area.y2 = BSP_LCD_ACTIVE_HEIGHT-1;
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <bsp_lcd_init+0x7c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	22ef      	movs	r2, #239	@ 0xef
 8000490:	83da      	strh	r2, [r3, #30]
	lcd_set_display_area(&hlcd->area);
 8000492:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <bsp_lcd_init+0x7c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	3318      	adds	r3, #24
 8000498:	4618      	mov	r0, r3
 800049a:	f000 fc81 	bl	8000da0 <lcd_set_display_area>
	lcd_set_orientation(hlcd->orientation);
 800049e:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <bsp_lcd_init+0x7c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fbd9 	bl	8000c5c <lcd_set_orientation>
	lcd_buffer_init(hlcd);
 80004aa:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <bsp_lcd_init+0x7c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fcb8 	bl	8000e24 <lcd_buffer_init>
	lcd_dma_init(hlcd);
 80004b4:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <bsp_lcd_init+0x7c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 fccd 	bl	8000e58 <lcd_dma_init>
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000020 	.word	0x20000020
 80004c8:	20000000 	.word	0x20000000

080004cc <bsp_lcd_send_cmd_mem_write>:
{
	lcd_set_orientation(orientation);
}

void bsp_lcd_send_cmd_mem_write(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	lcd_write_cmd(ILI9341_GRAM);
 80004d0:	202c      	movs	r0, #44	@ 0x2c
 80004d2:	f000 fbe1 	bl	8000c98 <lcd_write_cmd>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <bsp_lcd_write>:
{
	return (void*)hlcd->draw_buffer2;
}

void bsp_lcd_write(uint8_t *buffer, uint32_t nbytes)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
	uint16_t *buff_ptr;

	__disable_spi();
 80004e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000598 <bsp_lcd_write+0xbc>)
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d1f9      	bne.n	80004e6 <bsp_lcd_write+0xa>
 80004f2:	4b29      	ldr	r3, [pc, #164]	@ (8000598 <bsp_lcd_write+0xbc>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a28      	ldr	r2, [pc, #160]	@ (8000598 <bsp_lcd_write+0xbc>)
 80004f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004fc:	6013      	str	r3, [r2, #0]
	__spi_set_dff_16bit();
 80004fe:	4b26      	ldr	r3, [pc, #152]	@ (8000598 <bsp_lcd_write+0xbc>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a25      	ldr	r2, [pc, #148]	@ (8000598 <bsp_lcd_write+0xbc>)
 8000504:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000508:	6013      	str	r3, [r2, #0]
	__enable_spi();
 800050a:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <bsp_lcd_write+0xbc>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a22      	ldr	r2, [pc, #136]	@ (8000598 <bsp_lcd_write+0xbc>)
 8000510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000514:	6013      	str	r3, [r2, #0]

	LCD_CSX_LOW();
 8000516:	4b21      	ldr	r3, [pc, #132]	@ (800059c <bsp_lcd_write+0xc0>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a20      	ldr	r2, [pc, #128]	@ (800059c <bsp_lcd_write+0xc0>)
 800051c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000520:	6153      	str	r3, [r2, #20]

	buff_ptr = (uint16_t*)buffer;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	60fb      	str	r3, [r7, #12]
	while(nbytes){
 8000526:	e010      	b.n	800054a <bsp_lcd_write+0x6e>
		while(!REG_READ_BIT(SPI->SR,SPI_SR_TXE_Pos));
 8000528:	bf00      	nop
 800052a:	4b1b      	ldr	r3, [pc, #108]	@ (8000598 <bsp_lcd_write+0xbc>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f9      	beq.n	800052a <bsp_lcd_write+0x4e>
		REG_WRITE(SPI->DR,*buff_ptr);
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	881a      	ldrh	r2, [r3, #0]
 800053a:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <bsp_lcd_write+0xbc>)
 800053c:	60da      	str	r2, [r3, #12]
		++buff_ptr;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3302      	adds	r3, #2
 8000542:	60fb      	str	r3, [r7, #12]
		nbytes -= 2;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	3b02      	subs	r3, #2
 8000548:	603b      	str	r3, [r7, #0]
	while(nbytes){
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d1eb      	bne.n	8000528 <bsp_lcd_write+0x4c>
	}

	__disable_spi();
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <bsp_lcd_write+0xbc>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1f9      	bne.n	8000550 <bsp_lcd_write+0x74>
 800055c:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <bsp_lcd_write+0xbc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <bsp_lcd_write+0xbc>)
 8000562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000566:	6013      	str	r3, [r2, #0]
	LCD_CSX_HIGH();
 8000568:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <bsp_lcd_write+0xc0>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a0b      	ldr	r2, [pc, #44]	@ (800059c <bsp_lcd_write+0xc0>)
 800056e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000572:	6153      	str	r3, [r2, #20]
	__spi_set_dff_8bit();
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <bsp_lcd_write+0xbc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <bsp_lcd_write+0xbc>)
 800057a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800057e:	6013      	str	r3, [r2, #0]
	__enable_spi();
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <bsp_lcd_write+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <bsp_lcd_write+0xbc>)
 8000586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800058a:	6013      	str	r3, [r2, #0]

}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40003800 	.word	0x40003800
 800059c:	40020400 	.word	0x40020400

080005a0 <bsp_lcd_set_background_color>:
	lcd_write_dma(src_addr,nbytes);
}


void bsp_lcd_set_background_color(uint32_t rgb888)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(rgb888,0,(BSP_LCD_ACTIVE_WIDTH),0,(BSP_LCD_ACTIVE_HEIGHT));
 80005a8:	23f0      	movs	r3, #240	@ 0xf0
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80005b2:	2100      	movs	r1, #0
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f805 	bl	80005c4 <bsp_lcd_fill_rect>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <bsp_lcd_fill_rect>:
 * x_width : Width of the rectangle in number of pixels ( 1 <= x_width <= BSP_FB_WIDTH )
 * y_start : Vertical start position of the rectangle ( 0 <= y_start < BSP_FB_HEIGHT)
 * y_height : Height of the rectangle in number of pixels ( 1 <= y_height <= BSP_FB_HEIGHT )
 */
void bsp_lcd_fill_rect(uint32_t rgb888, uint32_t x_start, uint32_t x_width,uint32_t y_start,uint32_t y_height)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b08f      	sub	sp, #60	@ 0x3c
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]

	uint32_t total_bytes_to_write = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
	uint32_t bytes_sent_so_far = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t remaining_bytes = 0;;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t npix;
	uint32_t pixels_sent = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
	uint32_t x1,y1;
	uint32_t pixel_per_line = x_width;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	61bb      	str	r3, [r7, #24]

	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80005f0:	d862      	bhi.n	80006b8 <bsp_lcd_fill_rect+0xf4>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005f6:	4413      	add	r3, r2
 80005f8:	2bf0      	cmp	r3, #240	@ 0xf0
 80005fa:	d85f      	bhi.n	80006bc <bsp_lcd_fill_rect+0xf8>

	//1. calculate total number of bytes written in to DB
	total_bytes_to_write = get_total_bytes(hlcd,x_width,y_height);
 80005fc:	4b31      	ldr	r3, [pc, #196]	@ (80006c4 <bsp_lcd_fill_rect+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fc58 	bl	8000eba <get_total_bytes>
 800060a:	61f8      	str	r0, [r7, #28]
	remaining_bytes = total_bytes_to_write;
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28
	while(remaining_bytes){
 8000610:	e04e      	b.n	80006b0 <bsp_lcd_fill_rect+0xec>
		x1 = x_start+(pixels_sent % pixel_per_line);
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	69ba      	ldr	r2, [r7, #24]
 8000616:	fbb3 f2f2 	udiv	r2, r3, r2
 800061a:	69b9      	ldr	r1, [r7, #24]
 800061c:	fb01 f202 	mul.w	r2, r1, r2
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	4413      	add	r3, r2
 8000626:	617b      	str	r3, [r7, #20]
		y1 = y_start+(pixels_sent / pixel_per_line);
 8000628:	6a3a      	ldr	r2, [r7, #32]
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	4413      	add	r3, r2
 8000634:	613b      	str	r3, [r7, #16]

		make_area(&hlcd->area,x1,x_width,y1,y_height);
 8000636:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <bsp_lcd_fill_rect+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f103 0018 	add.w	r0, r3, #24
 800063e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	6979      	ldr	r1, [r7, #20]
 8000648:	f000 fc51 	bl	8000eee <make_area>

		if(x1 != x_start){
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	429a      	cmp	r2, r3
 8000652:	d006      	beq.n	8000662 <bsp_lcd_fill_rect+0x9e>
			npix = x_start+x_width - x1;
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	441a      	add	r2, r3
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000660:	e007      	b.n	8000672 <bsp_lcd_fill_rect+0xae>
		}else{
			npix = bytes_to_pixels(remaining_bytes,hlcd->pixel_format);
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <bsp_lcd_fill_rect+0x100>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	785b      	ldrb	r3, [r3, #1]
 8000668:	4619      	mov	r1, r3
 800066a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800066c:	f000 fd4f 	bl	800110e <bytes_to_pixels>
 8000670:	6278      	str	r0, [r7, #36]	@ 0x24
		}

		bytes_sent_so_far  +=  copy_to_draw_buffer(hlcd,pixels_to_bytes(npix,hlcd->pixel_format),rgb888);
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <bsp_lcd_fill_rect+0x100>)
 8000674:	681c      	ldr	r4, [r3, #0]
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <bsp_lcd_fill_rect+0x100>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	4619      	mov	r1, r3
 800067e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000680:	f000 fd52 	bl	8001128 <pixels_to_bytes>
 8000684:	4603      	mov	r3, r0
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4619      	mov	r1, r3
 800068a:	4620      	mov	r0, r4
 800068c:	f000 fcad 	bl	8000fea <copy_to_draw_buffer>
 8000690:	4602      	mov	r2, r0
 8000692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000694:	4413      	add	r3, r2
 8000696:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pixels_sent = bytes_to_pixels(bytes_sent_so_far,hlcd->pixel_format);
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <bsp_lcd_fill_rect+0x100>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	785b      	ldrb	r3, [r3, #1]
 800069e:	4619      	mov	r1, r3
 80006a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80006a2:	f000 fd34 	bl	800110e <bytes_to_pixels>
 80006a6:	6238      	str	r0, [r7, #32]
		remaining_bytes = total_bytes_to_write - bytes_sent_so_far;
 80006a8:	69fa      	ldr	r2, [r7, #28]
 80006aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	while(remaining_bytes){
 80006b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1ad      	bne.n	8000612 <bsp_lcd_fill_rect+0x4e>
 80006b6:	e002      	b.n	80006be <bsp_lcd_fill_rect+0xfa>
	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 80006b8:	bf00      	nop
 80006ba:	e000      	b.n	80006be <bsp_lcd_fill_rect+0xfa>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 80006bc:	bf00      	nop
		}
	}
 80006be:	3734      	adds	r7, #52	@ 0x34
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	20000000 	.word	0x20000000

080006c8 <lcd_pin_init>:




 void lcd_pin_init(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 80006ce:	4b81      	ldr	r3, [pc, #516]	@ (80008d4 <lcd_pin_init+0x20c>)
 80006d0:	607b      	str	r3, [r7, #4]

	/* Enable the clock for GPIOB,GPIOC, GPIOD  peripherals */
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOBEN_Pos);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f043 0202 	orr.w	r2, r3, #2
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	631a      	str	r2, [r3, #48]	@ 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOCEN_Pos);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f043 0204 	orr.w	r2, r3, #4
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	631a      	str	r2, [r3, #48]	@ 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIODEN_Pos);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f043 0208 	orr.w	r2, r3, #8
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	631a      	str	r2, [r3, #48]	@ 0x30

	//RESX
	REG_SET_VAL(LCD_RESX_PORT->MODER,0x1U,0x3,(LCD_RESX_PIN * 2U)); 		/*mode*/
 80006f6:	4b78      	ldr	r3, [pc, #480]	@ (80008d8 <lcd_pin_init+0x210>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a77      	ldr	r2, [pc, #476]	@ (80008d8 <lcd_pin_init+0x210>)
 80006fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	4b75      	ldr	r3, [pc, #468]	@ (80008d8 <lcd_pin_init+0x210>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a74      	ldr	r2, [pc, #464]	@ (80008d8 <lcd_pin_init+0x210>)
 8000708:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800070c:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_RESX_PORT->OTYPER,LCD_RESX_PIN); 						/*Output type*/
 800070e:	4b72      	ldr	r3, [pc, #456]	@ (80008d8 <lcd_pin_init+0x210>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	4a71      	ldr	r2, [pc, #452]	@ (80008d8 <lcd_pin_init+0x210>)
 8000714:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000718:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_RESX_PORT->OSPEEDR,2U,0x3U,(LCD_RESX_PIN * 2U)); 		/*speed*/
 800071a:	4b6f      	ldr	r3, [pc, #444]	@ (80008d8 <lcd_pin_init+0x210>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	4a6e      	ldr	r2, [pc, #440]	@ (80008d8 <lcd_pin_init+0x210>)
 8000720:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000724:	6093      	str	r3, [r2, #8]
 8000726:	4b6c      	ldr	r3, [pc, #432]	@ (80008d8 <lcd_pin_init+0x210>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	4a6b      	ldr	r2, [pc, #428]	@ (80008d8 <lcd_pin_init+0x210>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000730:	6093      	str	r3, [r2, #8]



	//D/CX
	REG_SET_VAL(LCD_DCX_PORT->MODER,0x1U,0x3,(LCD_DCX_PIN * 2U)); 		/*mode*/
 8000732:	4b69      	ldr	r3, [pc, #420]	@ (80008d8 <lcd_pin_init+0x210>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a68      	ldr	r2, [pc, #416]	@ (80008d8 <lcd_pin_init+0x210>)
 8000738:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	4b66      	ldr	r3, [pc, #408]	@ (80008d8 <lcd_pin_init+0x210>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a65      	ldr	r2, [pc, #404]	@ (80008d8 <lcd_pin_init+0x210>)
 8000744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000748:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_DCX_PORT->OTYPER,LCD_DCX_PIN); 					/*Output type*/
 800074a:	4b63      	ldr	r3, [pc, #396]	@ (80008d8 <lcd_pin_init+0x210>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	4a62      	ldr	r2, [pc, #392]	@ (80008d8 <lcd_pin_init+0x210>)
 8000750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000754:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_DCX_PORT->OSPEEDR,2U,0x3U,(LCD_DCX_PIN * 2U)); 		/*speed*/
 8000756:	4b60      	ldr	r3, [pc, #384]	@ (80008d8 <lcd_pin_init+0x210>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	4a5f      	ldr	r2, [pc, #380]	@ (80008d8 <lcd_pin_init+0x210>)
 800075c:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000760:	6093      	str	r3, [r2, #8]
 8000762:	4b5d      	ldr	r3, [pc, #372]	@ (80008d8 <lcd_pin_init+0x210>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	4a5c      	ldr	r2, [pc, #368]	@ (80008d8 <lcd_pin_init+0x210>)
 8000768:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800076c:	6093      	str	r3, [r2, #8]

	//SCL PB13
	REG_SET_VAL(LCD_SCL_PORT->MODER,2U,0x3U,(LCD_SCL_PIN * 2U));
 800076e:	4b5b      	ldr	r3, [pc, #364]	@ (80008dc <lcd_pin_init+0x214>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a5a      	ldr	r2, [pc, #360]	@ (80008dc <lcd_pin_init+0x214>)
 8000774:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	4b58      	ldr	r3, [pc, #352]	@ (80008dc <lcd_pin_init+0x214>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a57      	ldr	r2, [pc, #348]	@ (80008dc <lcd_pin_init+0x214>)
 8000780:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000784:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_SCL_PORT->OTYPER,LCD_SCL_PIN);
 8000786:	4b55      	ldr	r3, [pc, #340]	@ (80008dc <lcd_pin_init+0x214>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	4a54      	ldr	r2, [pc, #336]	@ (80008dc <lcd_pin_init+0x214>)
 800078c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000790:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_SCL_PORT->OSPEEDR,2U,0x3U,(LCD_SCL_PIN * 2U));
 8000792:	4b52      	ldr	r3, [pc, #328]	@ (80008dc <lcd_pin_init+0x214>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	4a51      	ldr	r2, [pc, #324]	@ (80008dc <lcd_pin_init+0x214>)
 8000798:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800079c:	6093      	str	r3, [r2, #8]
 800079e:	4b4f      	ldr	r3, [pc, #316]	@ (80008dc <lcd_pin_init+0x214>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	4a4e      	ldr	r2, [pc, #312]	@ (80008dc <lcd_pin_init+0x214>)
 80007a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80007a8:	6093      	str	r3, [r2, #8]
	REG_SET_VAL(LCD_SCL_PORT->AFR[1],5U,0xFU,((LCD_SCL_PIN %8) * 4U));
 80007aa:	4b4c      	ldr	r3, [pc, #304]	@ (80008dc <lcd_pin_init+0x214>)
 80007ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ae:	4a4b      	ldr	r2, [pc, #300]	@ (80008dc <lcd_pin_init+0x214>)
 80007b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80007b4:	6253      	str	r3, [r2, #36]	@ 0x24
 80007b6:	4b49      	ldr	r3, [pc, #292]	@ (80008dc <lcd_pin_init+0x214>)
 80007b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ba:	4a48      	ldr	r2, [pc, #288]	@ (80008dc <lcd_pin_init+0x214>)
 80007bc:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80007c0:	6253      	str	r3, [r2, #36]	@ 0x24

	//SPI_SDI(PB15)(PICO)
	REG_SET_VAL(LCD_SDI_PORT->MODER,2U,0x3U,(LCD_SDI_PIN * 2U));
 80007c2:	4b46      	ldr	r3, [pc, #280]	@ (80008dc <lcd_pin_init+0x214>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a45      	ldr	r2, [pc, #276]	@ (80008dc <lcd_pin_init+0x214>)
 80007c8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	4b43      	ldr	r3, [pc, #268]	@ (80008dc <lcd_pin_init+0x214>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a42      	ldr	r2, [pc, #264]	@ (80008dc <lcd_pin_init+0x214>)
 80007d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007d8:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_SDI_PORT->OTYPER,LCD_SDI_PIN);
 80007da:	4b40      	ldr	r3, [pc, #256]	@ (80008dc <lcd_pin_init+0x214>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	4a3f      	ldr	r2, [pc, #252]	@ (80008dc <lcd_pin_init+0x214>)
 80007e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007e4:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_SDI_PORT->OSPEEDR,2U,0x3U,(LCD_SDI_PIN * 2U));
 80007e6:	4b3d      	ldr	r3, [pc, #244]	@ (80008dc <lcd_pin_init+0x214>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	4a3c      	ldr	r2, [pc, #240]	@ (80008dc <lcd_pin_init+0x214>)
 80007ec:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80007f0:	6093      	str	r3, [r2, #8]
 80007f2:	4b3a      	ldr	r3, [pc, #232]	@ (80008dc <lcd_pin_init+0x214>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	4a39      	ldr	r2, [pc, #228]	@ (80008dc <lcd_pin_init+0x214>)
 80007f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007fc:	6093      	str	r3, [r2, #8]
	REG_SET_VAL(LCD_SDI_PORT->AFR[1],5U,0xFU,((LCD_SDI_PIN % 8) * 4U));
 80007fe:	4b37      	ldr	r3, [pc, #220]	@ (80008dc <lcd_pin_init+0x214>)
 8000800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000802:	4a36      	ldr	r2, [pc, #216]	@ (80008dc <lcd_pin_init+0x214>)
 8000804:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000808:	6253      	str	r3, [r2, #36]	@ 0x24
 800080a:	4b34      	ldr	r3, [pc, #208]	@ (80008dc <lcd_pin_init+0x214>)
 800080c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800080e:	4a33      	ldr	r2, [pc, #204]	@ (80008dc <lcd_pin_init+0x214>)
 8000810:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000814:	6253      	str	r3, [r2, #36]	@ 0x24

	//SPI_SDO(PC2)(POCI)
	REG_SET_VAL(LCD_SDO_PORT->MODER,2U,0x3U,(LCD_SDO_PIN * 2U));
 8000816:	4b32      	ldr	r3, [pc, #200]	@ (80008e0 <lcd_pin_init+0x218>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a31      	ldr	r2, [pc, #196]	@ (80008e0 <lcd_pin_init+0x218>)
 800081c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	4b2f      	ldr	r3, [pc, #188]	@ (80008e0 <lcd_pin_init+0x218>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a2e      	ldr	r2, [pc, #184]	@ (80008e0 <lcd_pin_init+0x218>)
 8000828:	f043 0320 	orr.w	r3, r3, #32
 800082c:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_SDO_PORT->OTYPER,LCD_SDO_PIN);
 800082e:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <lcd_pin_init+0x218>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	4a2b      	ldr	r2, [pc, #172]	@ (80008e0 <lcd_pin_init+0x218>)
 8000834:	f023 0304 	bic.w	r3, r3, #4
 8000838:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_SDO_PORT->OSPEEDR,2U,0x3U,(LCD_SDO_PIN * 2U));
 800083a:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <lcd_pin_init+0x218>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	4a28      	ldr	r2, [pc, #160]	@ (80008e0 <lcd_pin_init+0x218>)
 8000840:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000844:	6093      	str	r3, [r2, #8]
 8000846:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <lcd_pin_init+0x218>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	4a25      	ldr	r2, [pc, #148]	@ (80008e0 <lcd_pin_init+0x218>)
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	6093      	str	r3, [r2, #8]
	REG_SET_VAL(LCD_SDO_PORT->AFR[0],5U,0xFU,(LCD_SDO_PIN * 4U));
 8000852:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <lcd_pin_init+0x218>)
 8000854:	6a1b      	ldr	r3, [r3, #32]
 8000856:	4a22      	ldr	r2, [pc, #136]	@ (80008e0 <lcd_pin_init+0x218>)
 8000858:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800085c:	6213      	str	r3, [r2, #32]
 800085e:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <lcd_pin_init+0x218>)
 8000860:	6a1b      	ldr	r3, [r3, #32]
 8000862:	4a1f      	ldr	r2, [pc, #124]	@ (80008e0 <lcd_pin_init+0x218>)
 8000864:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8000868:	6213      	str	r3, [r2, #32]
	REG_CLR_BIT(LCD_CSX_PORT->OTYPER,LCD_CSX_PIN);
	REG_SET_VAL(LCD_CSX_PORT->OSPEEDR,2U,0x3U,(LCD_CSX_PIN * 2U));
	REG_SET_VAL(LCD_CSX_PORT->AFR[1],5U,0xFU,((LCD_CSX_PIN % 8) * 4U));
#else
	//CSX
	REG_SET_VAL(LCD_CSX_PORT->MODER,0x1U,0x3,(LCD_CSX_PIN * 2U)); 		/*mode*/
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <lcd_pin_init+0x214>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <lcd_pin_init+0x214>)
 8000870:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <lcd_pin_init+0x214>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a18      	ldr	r2, [pc, #96]	@ (80008dc <lcd_pin_init+0x214>)
 800087c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000880:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_CSX_PORT->OTYPER,LCD_CSX_PIN); 						/*Output type*/
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <lcd_pin_init+0x214>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	4a15      	ldr	r2, [pc, #84]	@ (80008dc <lcd_pin_init+0x214>)
 8000888:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800088c:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_CSX_PORT->OSPEEDR,2U,0x3U,(LCD_CSX_PIN * 2U)); 		/*speed*/
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <lcd_pin_init+0x214>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <lcd_pin_init+0x214>)
 8000894:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000898:	6093      	str	r3, [r2, #8]
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <lcd_pin_init+0x214>)
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	4a0f      	ldr	r2, [pc, #60]	@ (80008dc <lcd_pin_init+0x214>)
 80008a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008a4:	6093      	str	r3, [r2, #8]
	//CSX = HIGH
	REG_SET_BIT(LCD_CSX_PORT->ODR,LCD_CSX_PIN);
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <lcd_pin_init+0x214>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <lcd_pin_init+0x214>)
 80008ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008b0:	6153      	str	r3, [r2, #20]
#endif

	//RESX = HIGH
	REG_SET_BIT(LCD_RESX_PORT->ODR,LCD_RESX_PIN);
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <lcd_pin_init+0x210>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <lcd_pin_init+0x210>)
 80008b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008bc:	6153      	str	r3, [r2, #20]
	//D/CX = HIGH
	REG_SET_BIT(LCD_DCX_PORT->ODR,LCD_DCX_PIN);
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <lcd_pin_init+0x210>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a05      	ldr	r2, [pc, #20]	@ (80008d8 <lcd_pin_init+0x210>)
 80008c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008c8:	6153      	str	r3, [r2, #20]

}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40020400 	.word	0x40020400
 80008e0:	40020800 	.word	0x40020800

080008e4 <lcd_spi_enable>:

 void lcd_spi_enable(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
	__enable_spi();
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <lcd_spi_enable+0x18>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a03      	ldr	r2, [pc, #12]	@ (80008fc <lcd_spi_enable+0x18>)
 80008ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40003800 	.word	0x40003800

08000900 <lcd_spi_init>:



 void lcd_spi_init(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
	SPI_TypeDef *pSPI = SPI;
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <lcd_spi_init+0xa4>)
 8000908:	607b      	str	r3, [r7, #4]
	RCC_TypeDef *pRCC = RCC;
 800090a:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <lcd_spi_init+0xa8>)
 800090c:	603b      	str	r3, [r7, #0]

	REG_SET_BIT(pRCC->APB1ENR,RCC_APB1ENR_SPI2EN_Pos);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	641a      	str	r2, [r3, #64]	@ 0x40

	REG_SET_BIT(pSPI->CR1,SPI_CR1_MSTR_Pos); 		/*Controller mode*/
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f043 0204 	orr.w	r2, r3, #4
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_BIDIMODE_Pos);    /* 2 lines uni directional lines*/
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_DFF_Pos);			/* DFF = 8bits */
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSM_Pos);			/* SSM enable */
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSI_Pos);			/* SSI enable */
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_LSBFIRST_Pos);     /* Send msb first */
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	601a      	str	r2, [r3, #0]
	REG_SET_VAL(pSPI->CR1,0x00U,0x7U,SPI_CR1_BR_Pos); /* SPI clck = 42MHz/2 ==> 21 MHz */
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPOL_Pos); 		 /* CPOL = 0 */
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f023 0202 	bic.w	r2, r3, #2
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPHA_Pos); 		 /* CPHA = 0 */
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f023 0201 	bic.w	r2, r3, #1
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR2,SPI_CR2_FRF_Pos);			 /* SPI Motorola frame format*/
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f023 0210 	bic.w	r2, r3, #16
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	605a      	str	r2, [r3, #4]

#if (BSP_LCD_CS_MANAGE == AUTO)
	__disable_spi_ssm();
	__enable_spi_ssoe();
#endif
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40003800 	.word	0x40003800
 80009a8:	40023800 	.word	0x40023800

080009ac <delay_50ms>:

static void delay_50ms(void){
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	e002      	b.n	80009be <delay_50ms+0x12>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <delay_50ms+0x28>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d9f8      	bls.n	80009b8 <delay_50ms+0xc>
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	0009fff5 	.word	0x0009fff5

080009d8 <lcd_reset>:

 void lcd_reset(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
	LCD_RESX_LOW();
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <lcd_reset+0x54>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <lcd_reset+0x54>)
 80009e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80009e8:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	e002      	b.n	80009f6 <lcd_reset+0x1e>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <lcd_reset+0x58>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d9f8      	bls.n	80009f0 <lcd_reset+0x18>
	LCD_RESX_HIGH();
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <lcd_reset+0x54>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <lcd_reset+0x54>)
 8000a04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a08:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	e002      	b.n	8000a16 <lcd_reset+0x3e>
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	4a05      	ldr	r2, [pc, #20]	@ (8000a30 <lcd_reset+0x58>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d9f8      	bls.n	8000a10 <lcd_reset+0x38>
}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	0009fff5 	.word	0x0009fff5

08000a34 <lcd_config>:

 void lcd_config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
	uint8_t params[15];
	lcd_write_cmd(ILI9341_SWRESET);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 f92c 	bl	8000c98 <lcd_write_cmd>
	lcd_write_cmd(ILI9341_POWERB);
 8000a40:	20cf      	movs	r0, #207	@ 0xcf
 8000a42:	f000 f929 	bl	8000c98 <lcd_write_cmd>
	params[0] = 0x00;
 8000a46:	2300      	movs	r3, #0
 8000a48:	703b      	strb	r3, [r7, #0]
	params[1] = 0xD9;
 8000a4a:	23d9      	movs	r3, #217	@ 0xd9
 8000a4c:	707b      	strb	r3, [r7, #1]
	params[2] = 0x30;
 8000a4e:	2330      	movs	r3, #48	@ 0x30
 8000a50:	70bb      	strb	r3, [r7, #2]
	lcd_write_data(params, 3);
 8000a52:	463b      	mov	r3, r7
 8000a54:	2103      	movs	r1, #3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f960 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_POWER_SEQ);
 8000a5c:	20ed      	movs	r0, #237	@ 0xed
 8000a5e:	f000 f91b 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x64;
 8000a62:	2364      	movs	r3, #100	@ 0x64
 8000a64:	703b      	strb	r3, [r7, #0]
	params[1]= 0x03;
 8000a66:	2303      	movs	r3, #3
 8000a68:	707b      	strb	r3, [r7, #1]
	params[2]= 0X12;
 8000a6a:	2312      	movs	r3, #18
 8000a6c:	70bb      	strb	r3, [r7, #2]
	params[3]= 0X81;
 8000a6e:	2381      	movs	r3, #129	@ 0x81
 8000a70:	70fb      	strb	r3, [r7, #3]
	lcd_write_data(params, 4);
 8000a72:	463b      	mov	r3, r7
 8000a74:	2104      	movs	r1, #4
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f950 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_DTCA);
 8000a7c:	20e8      	movs	r0, #232	@ 0xe8
 8000a7e:	f000 f90b 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x85;
 8000a82:	2385      	movs	r3, #133	@ 0x85
 8000a84:	703b      	strb	r3, [r7, #0]
	params[1]= 0x10;
 8000a86:	2310      	movs	r3, #16
 8000a88:	707b      	strb	r3, [r7, #1]
	params[2]= 0x7A;
 8000a8a:	237a      	movs	r3, #122	@ 0x7a
 8000a8c:	70bb      	strb	r3, [r7, #2]
	lcd_write_data(params, 3);
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2103      	movs	r1, #3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f942 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_POWERA);
 8000a98:	20cb      	movs	r0, #203	@ 0xcb
 8000a9a:	f000 f8fd 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x39;
 8000a9e:	2339      	movs	r3, #57	@ 0x39
 8000aa0:	703b      	strb	r3, [r7, #0]
	params[1]= 0x2C;
 8000aa2:	232c      	movs	r3, #44	@ 0x2c
 8000aa4:	707b      	strb	r3, [r7, #1]
	params[2]= 0x00;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x34;
 8000aaa:	2334      	movs	r3, #52	@ 0x34
 8000aac:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x02;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	713b      	strb	r3, [r7, #4]
	lcd_write_data(params, 5);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2105      	movs	r1, #5
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f930 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_PRC);
 8000abc:	20f7      	movs	r0, #247	@ 0xf7
 8000abe:	f000 f8eb 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x20;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f926 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_DTCB);
 8000ad0:	20ea      	movs	r0, #234	@ 0xea
 8000ad2:	f000 f8e1 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x00;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 8000ada:	2300      	movs	r3, #0
 8000adc:	707b      	strb	r3, [r7, #1]
	lcd_write_data(params, 2);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f91a 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_POWER1);
 8000ae8:	20c0      	movs	r0, #192	@ 0xc0
 8000aea:	f000 f8d5 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x1B;
 8000aee:	231b      	movs	r3, #27
 8000af0:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 8000af2:	463b      	mov	r3, r7
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f910 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_POWER2);
 8000afc:	20c1      	movs	r0, #193	@ 0xc1
 8000afe:	f000 f8cb 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x12;
 8000b02:	2312      	movs	r3, #18
 8000b04:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 8000b06:	463b      	mov	r3, r7
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f906 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_VCOM1);
 8000b10:	20c5      	movs	r0, #197	@ 0xc5
 8000b12:	f000 f8c1 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x08;
 8000b16:	2308      	movs	r3, #8
 8000b18:	703b      	strb	r3, [r7, #0]
	params[1]= 0x26;
 8000b1a:	2326      	movs	r3, #38	@ 0x26
 8000b1c:	707b      	strb	r3, [r7, #1]
	lcd_write_data(params, 2);
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2102      	movs	r1, #2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f8fa 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_VCOM2);
 8000b28:	20c7      	movs	r0, #199	@ 0xc7
 8000b2a:	f000 f8b5 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0XB7;
 8000b2e:	23b7      	movs	r3, #183	@ 0xb7
 8000b30:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 8000b32:	463b      	mov	r3, r7
 8000b34:	2101      	movs	r1, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f8f0 	bl	8000d1c <lcd_write_data>


	lcd_write_cmd(ILI9341_PIXEL_FORMAT);
 8000b3c:	203a      	movs	r0, #58	@ 0x3a
 8000b3e:	f000 f8ab 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x55; //select RGB565
 8000b42:	2355      	movs	r3, #85	@ 0x55
 8000b44:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 8000b46:	463b      	mov	r3, r7
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f8e6 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_FRMCTR1);
 8000b50:	20b1      	movs	r0, #177	@ 0xb1
 8000b52:	f000 f8a1 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x00;
 8000b56:	2300      	movs	r3, #0
 8000b58:	703b      	strb	r3, [r7, #0]
	params[1]= 0x1B;//frame rate = 70
 8000b5a:	231b      	movs	r3, #27
 8000b5c:	707b      	strb	r3, [r7, #1]
	lcd_write_data(params, 2);
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2102      	movs	r1, #2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f8da 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_DFC);    // Display Function Control
 8000b68:	20b6      	movs	r0, #182	@ 0xb6
 8000b6a:	f000 f895 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x0A;
 8000b6e:	230a      	movs	r3, #10
 8000b70:	703b      	strb	r3, [r7, #0]
	params[1]= 0xA2;
 8000b72:	23a2      	movs	r3, #162	@ 0xa2
 8000b74:	707b      	strb	r3, [r7, #1]
	lcd_write_data(params, 2);
 8000b76:	463b      	mov	r3, r7
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f8ce 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_3GAMMA_EN);    // 3Gamma Function Disable
 8000b80:	20f2      	movs	r0, #242	@ 0xf2
 8000b82:	f000 f889 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x02; //LCD_WR_DATA(0x00);
 8000b86:	2302      	movs	r3, #2
 8000b88:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f8c4 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_GAMMA);
 8000b94:	2026      	movs	r0, #38	@ 0x26
 8000b96:	f000 f87f 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x01;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f8ba 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_PGAMMA);    //Set Gamma
 8000ba8:	20e0      	movs	r0, #224	@ 0xe0
 8000baa:	f000 f875 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x0F;
 8000bae:	230f      	movs	r3, #15
 8000bb0:	703b      	strb	r3, [r7, #0]
	params[1]= 0x1D;
 8000bb2:	231d      	movs	r3, #29
 8000bb4:	707b      	strb	r3, [r7, #1]
	params[2]= 0x1A;
 8000bb6:	231a      	movs	r3, #26
 8000bb8:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x0A;
 8000bba:	230a      	movs	r3, #10
 8000bbc:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x0D;
 8000bbe:	230d      	movs	r3, #13
 8000bc0:	713b      	strb	r3, [r7, #4]
	params[5]= 0x07;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	717b      	strb	r3, [r7, #5]
	params[6]= 0x49;
 8000bc6:	2349      	movs	r3, #73	@ 0x49
 8000bc8:	71bb      	strb	r3, [r7, #6]
	params[7]= 0X66;
 8000bca:	2366      	movs	r3, #102	@ 0x66
 8000bcc:	71fb      	strb	r3, [r7, #7]
	params[8]= 0x3B;
 8000bce:	233b      	movs	r3, #59	@ 0x3b
 8000bd0:	723b      	strb	r3, [r7, #8]
	params[9]= 0x07;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	727b      	strb	r3, [r7, #9]
	params[10]= 0x11;
 8000bd6:	2311      	movs	r3, #17
 8000bd8:	72bb      	strb	r3, [r7, #10]
	params[11]= 0x01;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	72fb      	strb	r3, [r7, #11]
	params[12]= 0x09;
 8000bde:	2309      	movs	r3, #9
 8000be0:	733b      	strb	r3, [r7, #12]
	params[13]= 0x05;
 8000be2:	2305      	movs	r3, #5
 8000be4:	737b      	strb	r3, [r7, #13]
	params[14]= 0x04;
 8000be6:	2304      	movs	r3, #4
 8000be8:	73bb      	strb	r3, [r7, #14]
	lcd_write_data(params, 15);
 8000bea:	463b      	mov	r3, r7
 8000bec:	210f      	movs	r1, #15
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f894 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_NGAMMA);
 8000bf4:	20e1      	movs	r0, #225	@ 0xe1
 8000bf6:	f000 f84f 	bl	8000c98 <lcd_write_cmd>
	params[0]= 0x00;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	703b      	strb	r3, [r7, #0]
	params[1]= 0x18;
 8000bfe:	2318      	movs	r3, #24
 8000c00:	707b      	strb	r3, [r7, #1]
	params[2]= 0x1D;
 8000c02:	231d      	movs	r3, #29
 8000c04:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x02;
 8000c06:	2302      	movs	r3, #2
 8000c08:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x0F;
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	713b      	strb	r3, [r7, #4]
	params[5]= 0x04;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	717b      	strb	r3, [r7, #5]
	params[6]= 0x36;
 8000c12:	2336      	movs	r3, #54	@ 0x36
 8000c14:	71bb      	strb	r3, [r7, #6]
	params[7]= 0x13;
 8000c16:	2313      	movs	r3, #19
 8000c18:	71fb      	strb	r3, [r7, #7]
	params[8]= 0x4C;
 8000c1a:	234c      	movs	r3, #76	@ 0x4c
 8000c1c:	723b      	strb	r3, [r7, #8]
	params[9]= 0x07;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	727b      	strb	r3, [r7, #9]
	params[10]= 0x13;
 8000c22:	2313      	movs	r3, #19
 8000c24:	72bb      	strb	r3, [r7, #10]
	params[11]= 0x0F;
 8000c26:	230f      	movs	r3, #15
 8000c28:	72fb      	strb	r3, [r7, #11]
	params[12]= 0x2E;
 8000c2a:	232e      	movs	r3, #46	@ 0x2e
 8000c2c:	733b      	strb	r3, [r7, #12]
	params[13]= 0x2F;
 8000c2e:	232f      	movs	r3, #47	@ 0x2f
 8000c30:	737b      	strb	r3, [r7, #13]
	params[14]= 0x05;
 8000c32:	2305      	movs	r3, #5
 8000c34:	73bb      	strb	r3, [r7, #14]
	lcd_write_data(params, 15);
 8000c36:	463b      	mov	r3, r7
 8000c38:	210f      	movs	r1, #15
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f86e 	bl	8000d1c <lcd_write_data>

	lcd_write_cmd(ILI9341_SLEEP_OUT); //Exit Sleep
 8000c40:	2011      	movs	r0, #17
 8000c42:	f000 f829 	bl	8000c98 <lcd_write_cmd>
	delay_50ms();
 8000c46:	f7ff feb1 	bl	80009ac <delay_50ms>
	delay_50ms();
 8000c4a:	f7ff feaf 	bl	80009ac <delay_50ms>
	lcd_write_cmd(ILI9341_DISPLAY_ON); //display on
 8000c4e:	2029      	movs	r0, #41	@ 0x29
 8000c50:	f000 f822 	bl	8000c98 <lcd_write_cmd>

}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <lcd_set_orientation>:



 void lcd_set_orientation(uint8_t orientation)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	uint8_t param;

	if(orientation == LANDSCAPE){
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d102      	bne.n	8000c72 <lcd_set_orientation+0x16>
		param = MADCTL_MV | MADCTL_MY | MADCTL_BGR; /*Memory Access Control <Landscape setting>*/
 8000c6c:	23a8      	movs	r3, #168	@ 0xa8
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e004      	b.n	8000c7c <lcd_set_orientation+0x20>
	}else if(orientation == PORTRAIT){
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <lcd_set_orientation+0x20>
		param = MADCTL_MY| MADCTL_MX| MADCTL_BGR;  /* Memory Access Control <portrait setting> */
 8000c78:	23c8      	movs	r3, #200	@ 0xc8
 8000c7a:	73fb      	strb	r3, [r7, #15]
	}

	lcd_write_cmd(ILI9341_MAC);    // Memory Access Control command
 8000c7c:	2036      	movs	r0, #54	@ 0x36
 8000c7e:	f000 f80b 	bl	8000c98 <lcd_write_cmd>
	lcd_write_data(&param, 1);
 8000c82:	f107 030f 	add.w	r3, r7, #15
 8000c86:	2101      	movs	r1, #1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f847 	bl	8000d1c <lcd_write_data>
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <lcd_write_cmd>:

 void lcd_write_cmd(uint8_t cmd)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *pSPI = SPI;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <lcd_write_cmd+0x78>)
 8000ca4:	60fb      	str	r3, [r7, #12]
	LCD_CSX_LOW();
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <lcd_write_cmd+0x7c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a1a      	ldr	r2, [pc, #104]	@ (8000d14 <lcd_write_cmd+0x7c>)
 8000cac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000cb0:	6153      	str	r3, [r2, #20]
	LCD_DCX_LOW(); //DCX = 0 , for command
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <lcd_write_cmd+0x80>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <lcd_write_cmd+0x80>)
 8000cb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000cbc:	6153      	str	r3, [r2, #20]
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000cbe:	bf00      	nop
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0f9      	beq.n	8000cc0 <lcd_write_cmd+0x28>
	REG_WRITE(pSPI->DR,cmd);
 8000ccc:	79fa      	ldrb	r2, [r7, #7]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	60da      	str	r2, [r3, #12]
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000cd2:	bf00      	nop
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0f9      	beq.n	8000cd4 <lcd_write_cmd+0x3c>
	while(REG_READ_BIT(pSPI->SR,SPI_SR_BSY_Pos));
 8000ce0:	bf00      	nop
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f9      	bne.n	8000ce2 <lcd_write_cmd+0x4a>
	LCD_DCX_HIGH();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <lcd_write_cmd+0x80>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a09      	ldr	r2, [pc, #36]	@ (8000d18 <lcd_write_cmd+0x80>)
 8000cf4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cf8:	6153      	str	r3, [r2, #20]
	LCD_CSX_HIGH();
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <lcd_write_cmd+0x7c>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <lcd_write_cmd+0x7c>)
 8000d00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d04:	6153      	str	r3, [r2, #20]

}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40003800 	.word	0x40003800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40020c00 	.word	0x40020c00

08000d1c <lcd_write_data>:

 void lcd_write_data(uint8_t *buffer,uint32_t len)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	SPI_TypeDef *pSPI = SPI;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <lcd_write_data+0x7c>)
 8000d28:	60bb      	str	r3, [r7, #8]
	LCD_CSX_LOW();
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <lcd_write_data+0x80>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d9c <lcd_write_data+0x80>)
 8000d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000d34:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i < len ;i++){
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	e010      	b.n	8000d5e <lcd_write_data+0x42>
		while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000d3c:	bf00      	nop
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f9      	beq.n	8000d3e <lcd_write_data+0x22>
		REG_WRITE(pSPI->DR,buffer[i]);
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60da      	str	r2, [r3, #12]
	for(uint32_t i = 0 ; i < len ;i++){
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3ea      	bcc.n	8000d3c <lcd_write_data+0x20>
	}
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000d66:	bf00      	nop
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f9      	beq.n	8000d68 <lcd_write_data+0x4c>
	while(REG_READ_BIT(pSPI->SR,SPI_SR_BSY_Pos));
 8000d74:	bf00      	nop
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f9      	bne.n	8000d76 <lcd_write_data+0x5a>
	LCD_CSX_HIGH();
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <lcd_write_data+0x80>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <lcd_write_data+0x80>)
 8000d88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d8c:	6153      	str	r3, [r2, #20]
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	40003800 	.word	0x40003800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <lcd_set_display_area>:
	 area.y2 = y2;
	 lcd_set_display_area(&area);
 }

void lcd_set_display_area(lcd_area_t *area)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	uint8_t params[4];
	/*Column address set(2Ah) */
	params[0] = HIGH_16(area->x1);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->x1);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->x2);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	885b      	ldrh	r3, [r3, #2]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->x2);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	885b      	ldrh	r3, [r3, #2]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	73fb      	strb	r3, [r7, #15]
	lcd_write_cmd(ILI9341_CASET);
 8000dd0:	202a      	movs	r0, #42	@ 0x2a
 8000dd2:	f7ff ff61 	bl	8000c98 <lcd_write_cmd>
	lcd_write_data(params, 4);
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2104      	movs	r1, #4
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff9d 	bl	8000d1c <lcd_write_data>

	params[0] = HIGH_16(area->y1);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	889b      	ldrh	r3, [r3, #4]
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->y1);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	889b      	ldrh	r3, [r3, #4]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->y2);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	88db      	ldrh	r3, [r3, #6]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->y2);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	88db      	ldrh	r3, [r3, #6]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	73fb      	strb	r3, [r7, #15]
	lcd_write_cmd(ILI9341_RASET);
 8000e0a:	202b      	movs	r0, #43	@ 0x2b
 8000e0c:	f7ff ff44 	bl	8000c98 <lcd_write_cmd>
	lcd_write_data(params, 4);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2104      	movs	r1, #4
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff80 	bl	8000d1c <lcd_write_data>

}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <lcd_buffer_init>:

void lcd_buffer_init(bsp_lcd_t *lcd)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	lcd->draw_buffer1 = bsp_db;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a08      	ldr	r2, [pc, #32]	@ (8000e50 <lcd_buffer_init+0x2c>)
 8000e30:	605a      	str	r2, [r3, #4]
	lcd->draw_buffer2 = bsp_wb;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a07      	ldr	r2, [pc, #28]	@ (8000e54 <lcd_buffer_init+0x30>)
 8000e36:	609a      	str	r2, [r3, #8]
	lcd->buff_to_draw = NULL;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
	lcd->buff_to_flush = NULL;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000048 	.word	0x20000048
 8000e54:	20002848 	.word	0x20002848

08000e58 <lcd_dma_init>:

void lcd_dma_init(bsp_lcd_t *lcd)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
#if (USE_DMA == 1)
	initialize_lcd_write_dma((uint32_t)bsp_wb,(uint32_t)&SPI2->DR);
#endif
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <convert_rgb888_to_rgb565>:
	uint32_t nitems = nbytes /2;
	dma_copy_m2p((uint32_t)src_addr,(uint32_t)&SPI->DR,nitems);
}

uint16_t convert_rgb888_to_rgb565(uint32_t rgb888)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
    uint16_t r,g,b;
	r = (rgb888 >> 19) & 0x1FU;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0cdb      	lsrs	r3, r3, #19
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	f003 031f 	and.w	r3, r3, #31
 8000e7c:	81fb      	strh	r3, [r7, #14]
	g = (rgb888 >> 10) & 0x3FU;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	0a9b      	lsrs	r3, r3, #10
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e88:	81bb      	strh	r3, [r7, #12]
	b = (rgb888 >> 3)  & 0x1FU;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	08db      	lsrs	r3, r3, #3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	f003 031f 	and.w	r3, r3, #31
 8000e94:	817b      	strh	r3, [r7, #10]
	return (uint16_t)((r << 11) | (g << 5) | b);
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	02db      	lsls	r3, r3, #11
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	89bb      	ldrh	r3, [r7, #12]
 8000e9e:	015b      	lsls	r3, r3, #5
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29b      	uxth	r3, r3
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <get_total_bytes>:

uint32_t get_total_bytes(bsp_lcd_t *hlcd,uint32_t w , uint32_t h)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b087      	sub	sp, #28
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
	uint8_t bytes_per_pixel = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	75fb      	strb	r3, [r7, #23]
	if(hlcd->pixel_format == BSP_LCD_PIXEL_FMT_RGB565){
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d101      	bne.n	8000ed6 <get_total_bytes+0x1c>
		bytes_per_pixel = 2;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	75fb      	strb	r3, [r7, #23]
	}
	return (w * h * bytes_per_pixel);
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	fb02 f303 	mul.w	r3, r2, r3
 8000ede:	7dfa      	ldrb	r2, [r7, #23]
 8000ee0:	fb02 f303 	mul.w	r3, r2, r3
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <make_area>:


void make_area(lcd_area_t *area,uint32_t x_start, uint32_t x_width,uint32_t y_start,uint32_t y_height){
 8000eee:	b480      	push	{r7}
 8000ef0:	b087      	sub	sp, #28
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	603b      	str	r3, [r7, #0]

	uint16_t lcd_total_width,lcd_total_height;

	lcd_total_width =  BSP_LCD_ACTIVE_WIDTH-1;
 8000efc:	f240 133f 	movw	r3, #319	@ 0x13f
 8000f00:	82fb      	strh	r3, [r7, #22]
	lcd_total_height = BSP_LCD_ACTIVE_HEIGHT -1;
 8000f02:	23ef      	movs	r3, #239	@ 0xef
 8000f04:	82bb      	strh	r3, [r7, #20]

	area->x1 = x_start;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	801a      	strh	r2, [r3, #0]
	area->x2 = x_start + x_width -1;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	805a      	strh	r2, [r3, #2]
	area->y1 = y_start;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	809a      	strh	r2, [r3, #4]
	area->y2 = y_start + y_height -1;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	80da      	strh	r2, [r3, #6]

	area->x2 = (area->x2 > lcd_total_width) ? lcd_total_width :area->x2;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	885b      	ldrh	r3, [r3, #2]
 8000f42:	8afa      	ldrh	r2, [r7, #22]
 8000f44:	4293      	cmp	r3, r2
 8000f46:	bf28      	it	cs
 8000f48:	4613      	movcs	r3, r2
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	805a      	strh	r2, [r3, #2]
	area->y2 = (area->y2 > lcd_total_height) ? lcd_total_height : area->y2;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	88db      	ldrh	r3, [r3, #6]
 8000f54:	8aba      	ldrh	r2, [r7, #20]
 8000f56:	4293      	cmp	r3, r2
 8000f58:	bf28      	it	cs
 8000f5a:	4613      	movcs	r3, r2
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	80da      	strh	r2, [r3, #6]

}
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <get_buff>:

uint8_t *get_buff(bsp_lcd_t *hlcd)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	uint32_t buf1 = (uint32_t)hlcd->draw_buffer1;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	617b      	str	r3, [r7, #20]
	uint32_t buf2 = (uint32_t)hlcd->draw_buffer2;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	613b      	str	r3, [r7, #16]

	__disable_irq();
 8000f80:	2301      	movs	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f383 8810 	msr	PRIMASK, r3
	if(hlcd->buff_to_draw == NULL && hlcd->buff_to_flush == NULL){
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d106      	bne.n	8000fa0 <get_buff+0x34>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d102      	bne.n	8000fa0 <get_buff+0x34>
		return  hlcd->draw_buffer1;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	e01f      	b.n	8000fe0 <get_buff+0x74>
	}else if((uint32_t)hlcd->buff_to_flush == buf1 && hlcd->buff_to_draw == NULL ){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d106      	bne.n	8000fba <get_buff+0x4e>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <get_buff+0x4e>
		return  hlcd->draw_buffer2;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	e012      	b.n	8000fe0 <get_buff+0x74>
	}else if ((uint32_t)hlcd->buff_to_flush == buf2 && hlcd->buff_to_draw == NULL){
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d106      	bne.n	8000fd4 <get_buff+0x68>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <get_buff+0x68>
		return  hlcd->draw_buffer1;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	e005      	b.n	8000fe0 <get_buff+0x74>
	}
	__enable_irq();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	f383 8810 	msr	PRIMASK, r3

	return NULL;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	371c      	adds	r7, #28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <copy_to_draw_buffer>:


uint32_t copy_to_draw_buffer( bsp_lcd_t *hlcd,uint32_t nbytes,uint32_t rgb888)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b088      	sub	sp, #32
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
	uint16_t *fb_ptr = NULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
	uint32_t npixels;
	hlcd->buff_to_draw = get_buff(hlcd);
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff ffb6 	bl	8000f6c <get_buff>
 8001000:	4602      	mov	r2, r0
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	611a      	str	r2, [r3, #16]
	fb_ptr = (uint16_t*)hlcd->buff_to_draw;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	61fb      	str	r3, [r7, #28]
	nbytes =  ((nbytes > DB_SIZE)?DB_SIZE:nbytes);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001012:	bf28      	it	cs
 8001014:	f44f 5320 	movcs.w	r3, #10240	@ 0x2800
 8001018:	60bb      	str	r3, [r7, #8]
	npixels= bytes_to_pixels(nbytes,hlcd->pixel_format);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	4619      	mov	r1, r3
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f000 f874 	bl	800110e <bytes_to_pixels>
 8001026:	6178      	str	r0, [r7, #20]
	if(hlcd->buff_to_draw != NULL){
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d035      	beq.n	800109c <copy_to_draw_buffer+0xb2>
		for(uint32_t i = 0 ; i < npixels ;i++){
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	e00c      	b.n	8001050 <copy_to_draw_buffer+0x66>
			*fb_ptr = convert_rgb888_to_rgb565(rgb888);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff17 	bl	8000e6a <convert_rgb888_to_rgb565>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	801a      	strh	r2, [r3, #0]
			fb_ptr++;
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	3302      	adds	r3, #2
 8001048:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0 ; i < npixels ;i++){
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	3301      	adds	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	429a      	cmp	r2, r3
 8001056:	d3ee      	bcc.n	8001036 <copy_to_draw_buffer+0x4c>
		}
		hlcd->write_length = pixels_to_bytes(npixels,hlcd->pixel_format);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	785b      	ldrb	r3, [r3, #1]
 800105c:	4619      	mov	r1, r3
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f000 f862 	bl	8001128 <pixels_to_bytes>
 8001064:	4602      	mov	r2, r0
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	60da      	str	r2, [r3, #12]
		while(!is_lcd_write_allowed(hlcd));
 800106a:	bf00      	nop
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 f81a 	bl	80010a6 <is_lcd_write_allowed>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f9      	beq.n	800106c <copy_to_draw_buffer+0x82>
		hlcd->buff_to_flush = hlcd->buff_to_draw;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	615a      	str	r2, [r3, #20]
		hlcd->buff_to_draw = NULL;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
		lcd_flush(hlcd);
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f000 f827 	bl	80010da <lcd_flush>
		return pixels_to_bytes(npixels,hlcd->pixel_format);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	4619      	mov	r1, r3
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f000 f848 	bl	8001128 <pixels_to_bytes>
 8001098:	4603      	mov	r3, r0
 800109a:	e000      	b.n	800109e <copy_to_draw_buffer+0xb4>
	}

	return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <is_lcd_write_allowed>:


static uint8_t is_lcd_write_allowed(bsp_lcd_t *hlcd)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	__disable_irq();
 80010ae:	2301      	movs	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f383 8810 	msr	PRIMASK, r3
	if(!hlcd->buff_to_flush)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <is_lcd_write_allowed+0x1e>
		return TRUE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e005      	b.n	80010d0 <is_lcd_write_allowed+0x2a>
	__enable_irq();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f383 8810 	msr	PRIMASK, r3

	return FALSE;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <lcd_flush>:




 void lcd_flush(bsp_lcd_t *hlcd)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
	lcd_set_display_area(&hlcd->area);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3318      	adds	r3, #24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe5a 	bl	8000da0 <lcd_set_display_area>
	bsp_lcd_send_cmd_mem_write();
 80010ec:	f7ff f9ee 	bl	80004cc <bsp_lcd_send_cmd_mem_write>
#if (USE_DMA == 0)
	bsp_lcd_write(hlcd->buff_to_flush,hlcd->write_length);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695a      	ldr	r2, [r3, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4610      	mov	r0, r2
 80010fc:	f7ff f9ee 	bl	80004dc <bsp_lcd_write>
	hlcd->buff_to_flush = NULL;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
#else
	lcd_write_dma((uint32_t)hlcd->buff_to_flush,hlcd->write_length);
#endif
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <bytes_to_pixels>:


uint32_t bytes_to_pixels(uint32_t nbytes, uint8_t pixel_format)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
	UNUSED(pixel_format);
	return nbytes/2;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	085b      	lsrs	r3, r3, #1

}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <pixels_to_bytes>:

uint32_t pixels_to_bytes(uint32_t pixels, uint8_t pixel_format)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
	UNUSED(pixel_format);
	return pixels * 2UL;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	005b      	lsls	r3, r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <DMA_TransferError>:

/////////////////////////////////////////////////////DMA functions///////////////////////////////////////////

__attribute__((weak)) void DMA_TransferError(bsp_lcd_t *lcd)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
	UNUSED(lcd);
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <DMA_TransferComplete>:

__attribute__((weak)) void DMA_TransferComplete(bsp_lcd_t *lcd)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	UNUSED(lcd);
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <dma_lcd_write_error>:
	__enable_dma(pStream);
	REG_SET_BIT(SPI->CR2,SPI_CR2_TXDMAEN_Pos);
}

static void dma_lcd_write_error(bsp_lcd_t *lcd)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	DMA_TransferError(lcd);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffe7 	bl	8001142 <DMA_TransferError>
	while(1);
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <dma_lcd_write_error+0xe>

08001178 <dma_cmplt_callback_spi_write>:
}



static void dma_cmplt_callback_spi_write(bsp_lcd_t *lcd)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	lcd->buff_to_flush = NULL;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
	 LCD_CSX_HIGH();
	__disable_spi();
	__spi_set_dff_8bit();
	__enable_spi();
#endif
	DMA_TransferComplete(lcd);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffe4 	bl	8001154 <DMA_TransferComplete>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <DMA1_Stream4_IRQHandler>:
}



void dma_lcd_write_irq_handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	uint32_t tmp;
	DMA_TypeDef *pDMA = DMA1;
 800119a:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <DMA1_Stream4_IRQHandler+0x70>)
 800119c:	607b      	str	r3, [r7, #4]
	tmp = pDMA->HISR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	603b      	str	r3, [r7, #0]
	if(REG_READ_BIT(tmp,DMA_HISR_TCIF4_Pos)){
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <DMA1_Stream4_IRQHandler+0x2e>
		REG_SET_BIT(pDMA->HIFCR,DMA_HIFCR_CTCIF4_Pos);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f043 0220 	orr.w	r2, r3, #32
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60da      	str	r2, [r3, #12]
		dma_cmplt_callback_spi_write(&lcd_handle);
 80011ba:	4813      	ldr	r0, [pc, #76]	@ (8001208 <DMA1_Stream4_IRQHandler+0x74>)
 80011bc:	f7ff ffdc 	bl	8001178 <dma_cmplt_callback_spi_write>

	else if(REG_READ_BIT(tmp,DMA_HISR_FEIF4_Pos)){
		REG_SET_BIT(pDMA->HIFCR,DMA_HIFCR_CFEIF4_Pos);
		dma_lcd_write_error(&lcd_handle);
	}
}
 80011c0:	e01c      	b.n	80011fc <DMA1_Stream4_IRQHandler+0x68>
	else if(REG_READ_BIT(tmp,DMA_HISR_TEIF4_Pos)){
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d009      	beq.n	80011e0 <DMA1_Stream4_IRQHandler+0x4c>
		REG_SET_BIT(pDMA->HIFCR,DMA_HIFCR_CTEIF4_Pos);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f043 0208 	orr.w	r2, r3, #8
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	60da      	str	r2, [r3, #12]
		dma_lcd_write_error(&lcd_handle);
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <DMA1_Stream4_IRQHandler+0x74>)
 80011da:	f7ff ffc4 	bl	8001166 <dma_lcd_write_error>
}
 80011de:	e00d      	b.n	80011fc <DMA1_Stream4_IRQHandler+0x68>
	else if(REG_READ_BIT(tmp,DMA_HISR_FEIF4_Pos)){
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d008      	beq.n	80011fc <DMA1_Stream4_IRQHandler+0x68>
		REG_SET_BIT(pDMA->HIFCR,DMA_HIFCR_CFEIF4_Pos);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60da      	str	r2, [r3, #12]
		dma_lcd_write_error(&lcd_handle);
 80011f6:	4804      	ldr	r0, [pc, #16]	@ (8001208 <DMA1_Stream4_IRQHandler+0x74>)
 80011f8:	f7ff ffb5 	bl	8001166 <dma_lcd_write_error>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40026000 	.word	0x40026000
 8001208:	20000020 	.word	0x20000020

0800120c <__libc_init_array>:
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	4d0d      	ldr	r5, [pc, #52]	@ (8001244 <__libc_init_array+0x38>)
 8001210:	4c0d      	ldr	r4, [pc, #52]	@ (8001248 <__libc_init_array+0x3c>)
 8001212:	1b64      	subs	r4, r4, r5
 8001214:	10a4      	asrs	r4, r4, #2
 8001216:	2600      	movs	r6, #0
 8001218:	42a6      	cmp	r6, r4
 800121a:	d109      	bne.n	8001230 <__libc_init_array+0x24>
 800121c:	4d0b      	ldr	r5, [pc, #44]	@ (800124c <__libc_init_array+0x40>)
 800121e:	4c0c      	ldr	r4, [pc, #48]	@ (8001250 <__libc_init_array+0x44>)
 8001220:	f000 f818 	bl	8001254 <_init>
 8001224:	1b64      	subs	r4, r4, r5
 8001226:	10a4      	asrs	r4, r4, #2
 8001228:	2600      	movs	r6, #0
 800122a:	42a6      	cmp	r6, r4
 800122c:	d105      	bne.n	800123a <__libc_init_array+0x2e>
 800122e:	bd70      	pop	{r4, r5, r6, pc}
 8001230:	f855 3b04 	ldr.w	r3, [r5], #4
 8001234:	4798      	blx	r3
 8001236:	3601      	adds	r6, #1
 8001238:	e7ee      	b.n	8001218 <__libc_init_array+0xc>
 800123a:	f855 3b04 	ldr.w	r3, [r5], #4
 800123e:	4798      	blx	r3
 8001240:	3601      	adds	r6, #1
 8001242:	e7f2      	b.n	800122a <__libc_init_array+0x1e>
 8001244:	0800126c 	.word	0x0800126c
 8001248:	0800126c 	.word	0x0800126c
 800124c:	0800126c 	.word	0x0800126c
 8001250:	08001270 	.word	0x08001270

08001254 <_init>:
 8001254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001256:	bf00      	nop
 8001258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800125a:	bc08      	pop	{r3}
 800125c:	469e      	mov	lr, r3
 800125e:	4770      	bx	lr

08001260 <_fini>:
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	bf00      	nop
 8001264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001266:	bc08      	pop	{r3}
 8001268:	469e      	mov	lr, r3
 800126a:	4770      	bx	lr
